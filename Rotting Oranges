class Solution {
    public int orangesRotting(int[][] grid) {
       Queue<int[]>queue=new LinkedList<>();
        int freshcount=0;
        for(int i=0;i<grid.length;i++)
        {
            for(int j=0;j<grid[0].length;j++)
            {
                if(grid[i][j]!=0)
                    freshcount++;
                if(grid[i][j]==2)
                    queue.offer(new int[]{i,j});
            }
        }
        if(freshcount==0)
            return 0;
        
        int minutes=0;
        int cnt=0;
        int countMin=0;
        int dx[]={0,0,1,-1};
        int dy[]={1,-1,0,0};
        
        while(!queue.isEmpty())
        {
            int size=queue.size();
            cnt+=size;
            
            for(int i=0;i<size;i++)
            {
                int []point=queue.poll();
                for(int j=0;j<4;j++)
                {
                    int x=point[0]+dx[j];
                    int y=point[1]+dy[j];
                    
                    if(x<0 || y<0 || x>=grid.length || y>=grid[0].length || grid[x][y]==0 || grid[x][y]==2)
                    {
                        continue;
                    }
                    grid[x][y]=2;
                    queue.offer(new int[]{x,y});
                }
            }
            if(queue.size()!=0)
                countMin++;
        }
        return freshcount==cnt? countMin :-1;
    }
}
